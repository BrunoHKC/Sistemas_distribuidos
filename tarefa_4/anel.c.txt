/* --------------------------------------------------------------------------------------
   Tarefa 3 para aprender a usar nossa ferramenta de simulação, o SMPL.
   Objetivo: Quando um processo correto testa outro processo correto obtém as informações do estado dos demais processos do sistema,
             exceto aqueles que testou nesta rodada, além do próprio testador.
   Restricoes: O vetor State[] de cada processo eh inicializado com -1 em todos os processos do sistema,
              exceto o estado do proprio processo que mantem o vetor.

   Autor: Bruno Henrique Kamarowski de Carvalho
   Disciplina: Sistemas Distribuidos
   Data da ultima atualizacao: 07/01/2023
----------------------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

/*---- definicoes uteis ----*/
#define FALSE   0
#define TRUE  1

/*---- aqui definimos os estados dos processos ----*/
#define UNKNOWN   -1
#define CORRETO  0
#define FALHO 1

/*---- aqui definimos os eventos ----*/
#define test   1
#define fault  2
#define recovery 3

/*---- declaramos agora o TipoProcesso ----*/
typedef struct {
   int id;       /* identificador de facility SMPL */
   /* variáveis locais do processo são declaradas aqui */
} TipoProcesso;

TipoProcesso *processo; 

void imprimeVetorState(int** state,int i,int N)
{
    printf("State[%d] : {",i);
    for(int j = 0; j < N;j++)
    {
        printf(" %d ",state[i][j]);
    }
    printf("}\n");
}

void resetaTestes(int* vetorTestes,int N)
{
    for(int i = 0; i < N;i++)
        vetorTestes[i] = FALSE;
}

void atualizaInformacoes(int** state,int** processoTestados,int i,int j,int N)
{
    for(int k = 0;k < N;k++)
    {
        if(i == k) continue;  //Nao atualiza o proprio estado
        if(!processoTestados[i][k] && state[j][k] != UNKNOWN) //Se o processo i nao testou e o estado eh conhecido
        {
            state[i][k] =state[j][k];
        }
    }

}

int main (int argc, char *argv[]) {
    static int N,      /* number of nodes is parameter */
               token,  /* node identifier, natural number */ 
               event,
               r,
               i,
               j;

    static char fa_name[5];

    int **state;
    int **matrizTestes;

    if (argc != 2) {
      puts("Uso correto: anel <num-processos>");
      exit(1);
    }

    N = atoi(argv[1]);
    smpl(0, "Processo testa o seguinte, mantem o estado dos demais e processos trocam informacoes sobre os estados");
    reset();
    stream(1);

    printf("=============================================================================\n");
    printf("Inicio da execucao: programa que implementa simulacao onde cada processo testa o seguinte ate achar um processo correto, mantem o estado dos demais processos e processos trocam informacoes sobre os estados.\n");
    printf("Prof. Elias P. Duarte Jr.  -  Disciplina Sistemas Distribuidos\n");
    printf("=============================================================================\n");
 
/*----- inicializacao -----*/

    //Aloca vetores com os estados
    state = (int **)malloc(N*sizeof(int*));
    for(i=0;i<N;i++)
    {
        state[i] = (int *)malloc(N*sizeof(int));
    }

    //Inicializa vetores dos estados
    for(i=0;i<N;i++)
    {
        for(j=0;j<N;j++)
        {
            state[i][j] = UNKNOWN;
        }
        state[i][i] = CORRETO;
    }
    printf("Inicializei os vetores de estados");

    //Aloca aloca estrutura para mantes os processos testados
    matrizTestes = (int **)malloc(N*sizeof(int*));
    for(i=0;i<N;i++)
    {
        matrizTestes[i] = (int *)malloc(N*sizeof(int));
    }

    printf("Inicializei os vetores de estados");

    //Inicializa processos
    processo = (TipoProcesso *) malloc(sizeof(TipoProcesso)*N);

    for (i=0; i<N; i++) {
       memset (fa_name, '\0', 5);
       sprintf(fa_name, "%d", i);
       processo[i].id = facility(fa_name,1);
       // printf("fa_name = %s, processo[%d].id = %d\n", fa_name, i, processo[i].id);
    } /* end for */

    printf("Inicializei %d processos\n",N);


/*----- vamos escalonar os eventos iniciais -----*/

    for (i=0; i<N; i++) {
       schedule(test, 30.0, i);
     } 
    schedule(fault, 31.0, 1);
    schedule(recovery, 91.0, 1);
    for(i =2;i<N;i++)
    {
        schedule(fault, 91.0, i);
    }
    printf("Escalonei os testes iniciais de todos os processos\n");
    printf("Escalonei uma falha do processo 1 no tempo 31.0\n");
    printf("Escalonei uma recuperacao do processo 1 no tempo 91.0\n");
    printf("Escalonei uma falha em todos os processos exceto os processos 1 e 2 no tempo 91.0\n");

    
/*----- agora vem o loop principal do simulador -----*/

    printf("Inicio dos eventos da simulacao\n");

    while (time() < 150.0) {
      cause(&event, &token);
      switch(event) {
       case test: 
         if (status(processo[token].id) != 0) break;  // processo falho não testa!
         resetaTestes(matrizTestes[token],N);

         int testado = (token+1)%N;
         int testa = TRUE;
         while(testa)
         {
            if(testado == token) break;               // processo nao se testa
            matrizTestes[token][testado] = TRUE;
            switch(status(processo[testado].id))     // testa o proximo processo
            {
                case 0:
                  //Processo testado esta correto
                  state[token][testado] = CORRETO;
                  atualizaInformacoes(state,matrizTestes,token,testado,N);
                  printf("o processo %d testou o processo %d no tempo %5.1f e ele estava correto\n",token, testado,time());
                  testa = FALSE;
                  break;
                default:
                  //Processo testado esta falho
                  state[token][testado] = FALHO;
                  printf("o processo %d testou o processo %d no tempo %5.1f e ele estava falho\n",token, testado,time());
                  testado = (testado+1)%N;
                  break;
            }
         }

         imprimeVetorState(state,token,N);
         
         schedule(test, 30.0, token);
         break;
       case fault:
         r = request(processo[token].id, token, 0);
         printf("o processo %d falhou no tempo %5.1f\n", token, time());
         break;
       case recovery:
         release(processo[token].id, token);
         schedule(test, 1.0, token);
         printf("o processo %d recuperou no tempo %5.1f\n", token, time());
         break;
      } /* end switch */
    } /* end while */
} /* end tempo.c */
