/* --------------------------------------------------------------------------------------
   Tarefa 1 para aprender a usar nossa ferramenta de simulação, o SMPL.
   Objetivo: Fazer cada um dos processos testar o seguinte no anel.
   Restricoes: -

   Autor: Bruno Henrique Kamarowski de Carvalho
   Disciplina: Sistemas Distribuidos
   Data da ultima atualizacao: 07/01/2023
----------------------------------------------------------------------------------------*/



#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

/* cada processo conta seu tempo */

/*---- aqui definimos os eventos ----*/
#define test   1
#define fault  2
#define recovery 3

/*---- declaramos agora o TipoProcesso ----*/
typedef struct {
   int id;       /* identificador de facility SMPL */
   /* variáveis locais do processo são declaradas aqui */
} TipoProcesso;

TipoProcesso *processo; 

int main (int argc, char *argv[]) {
    static int N,      /* number of nodes is parameter */
               token,  /* node identifier, natural number */ 
               event,
               r,
               i;

    static char fa_name[5];

    if (argc != 2) {
      puts("Uso correto: anel <num-processos>");
      exit(1);
    }

    N = atoi(argv[1]);
    smpl(0, "Processo testa o seguinte");
    reset();
    stream(1);

    printf("=============================================================================\n");
    printf("Inicio da execucao: programa que implementa simulacao onde cada processo testa o seguinte.\n");
    printf("Prof. Elias P. Duarte Jr.  -  Disciplina Sistemas Distribuidos\n");
    printf("=============================================================================\n");
 
/*----- inicializacao -----*/

    processo = (TipoProcesso *) malloc(sizeof(TipoProcesso)*N);

    for (i=0; i<N; i++) {
       memset (fa_name, '\0', 5);
       sprintf(fa_name, "%d", i);
       processo[i].id = facility(fa_name,1);
       // printf("fa_name = %s, processo[%d].id = %d\n", fa_name, i, processo[i].id);
    } /* end for */

    printf("Inicializei %d processos\n",N);

/*----- vamos escalonar os eventos iniciais -----*/

    for (i=0; i<N; i++) {
       schedule(test, 30.0, i);
     } 
    schedule(fault, 31.0, 1);
    schedule(fault, 61.0, 2);
    schedule(recovery, 91.0, 1);
    for(i = 0; i < N; i++)
    {
        if(i != 3){schedule(fault, 150.0, i);}
    }
    printf("Escalonei os testes iniciais de todos os processos\n");
    printf("Escalonei uma falha do processo 1 no tempo 31.0\n");
    printf("Escalonei uma falha do processo 2 no tempo 61.0\n");
    printf("Escalonei uma recuperacao do processo 1 no tempo 91.0\n");
    printf("Escalonei uma falha em todos os processos exceto no processo 3 no tempo 150.0\n");

    
/*----- agora vem o loop principal do simulador -----*/

    printf("Inicio dos eventos da simulacao\n");

    while (time() < 185.0) {
      cause(&event, &token);
      switch(event) {
       case test: 
         if (status(processo[token].id) != 0) break; // processo falho não testa!
         switch(status(processo[(token+1)%N].id))// testa o proximo processo
         {
            case 0:
              //Processo testado esta correto
              printf("o processo %d testou o processo %d no tempo %5.1f e ele estava correto\n",token, (token+1)%N,time());
              break;
            default:
              //Processo testado esta falho
              printf("o processo %d testou o processo %d no tempo %5.1f e ele estava falho\n",token, (token+1)%N,time());
              break;
         }
         schedule(test, 30.0, token);
         break;
       case fault:
         r = request(processo[token].id, token, 0);
         printf("o processo %d falhou no tempo %5.1f\n", token, time());
         break;
       case recovery:
         release(processo[token].id, token);
         schedule(test, 1.0, token);
         printf("o processo %d recuperou no tempo %5.1f\n", token, time());
         break;
      } /* end switch */
    } /* end while */
} /* end tempo.c */
